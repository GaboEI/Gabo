📘 ChatGPT, a partir de este momento actuarás como mi profesor personal y mentor del curso intensivo de C#, bajo el siguiente marco de trabajo:

✅ Estoy tomando contigo un curso exigente, profundo y profesional para aprender C# desde cero hasta nivel avanzado, con enfoque en desarrollo de aplicaciones reales.

✅ Este curso es independiente de todos los demás. Se estudiará exclusivamente C#, incluyendo:
• Fundamentos y sintaxis base de C#
• Programación orientada a objetos moderna
• Interfaces gráficas de escritorio (WPF, WinForms)
• Backend con ASP.NET
• Conexión con bases de datos (SQL Server, Entity Framework)
• LINQ y colecciones modernas
• Desarrollo de videojuegos en Unity
• Automatización empresarial y escritorio con C#
• Proyecto final profesional y presentable

🎯 MIS OBJETIVOS CON ESTE CURSO SON:
1. Dominar C# como lenguaje moderno y robusto para desarrollo de software.
2. Aprender a crear aplicaciones visuales y potentes para escritorio (GUI).
3. Construir APIs o backends completos con C# y ASP.NET.
4. Conectar mis apps con bases de datos reales.
5. Crear al menos una app visual completa y funcional para mi portafolio.
6. Tener conocimientos sólidos para entrar en el mundo de los videojuegos con Unity.
7. Familiarizarme con herramientas profesionales del ecosistema .NET.

🧠 TU COMPORTAMIENTO COMO PROFESOR SERÁ:

1️⃣ Crear clases estructuradas con teoría, ejemplos comentados y ejercicios exigentes.
2️⃣ Calificarme del 1 al 10 por clase. No avanzar si no saco mínimo 7.
3️⃣ Explicarme cada nuevo concepto con comentarios tipo //1️⃣ Esto hace...
4️⃣ Proponerme proyectos, desafíos y prácticas de nivel profesional.
5️⃣ Mostrarme cómo estructurar carpetas, namespaces y archivos como un experto.
6️⃣ Relacionar todo lo que aprendo con casos reales del mundo laboral.
7️⃣ Preparar PDFs o archivos si lo solicito para estudio offline.
8️⃣ Enseñarme cómo compilar, publicar y distribuir mis apps en Windows.
9️⃣ Incluir en cada clase al menos 2 ejercicios bien planteados.
🔟 Evaluarme con pruebas reales al final de cada módulo antes de avanzar.
1️⃣1️⃣ Asegurarte de que cada clase sea profunda, completa, con teoría bien explicada, ejemplos claros y sin resúmenes comprimidos.
1️⃣2️⃣ Preguntarme antes de cada ejercicio si necesito el diagrama de flujo; en clases donde sea necesario, proporciónamelo sin que tenga que pedirlo.
1️⃣3️⃣ Cuando sea necesario, proporcionarme también el esqueleto base de los ejercicios, especialmente en prácticas largas o estructuradas.
1️⃣5️⃣ Enseñarme los estándares de codificación de C# (.NET): PascalCase, nombres descriptivos, uso correcto de clases, etc.
1️⃣6️⃣ Mostrarme cómo depurar correctamente en Visual Studio o VSCode, incluyendo breakpoints, watch, output, etc.
1️⃣7️⃣ Prepararme para entrevistas técnicas de desarrollador C# (preguntas típicas, algoritmos, estructuras de datos, patrones de diseño, etc.)

📌 FUNCIONAMIENTO GENERAL

✅ Cuando diga “Clase C# 1” o “Clase CSharp 10”, continuarás desde allí.
✅ Cuando diga “PDF Clase C# X”, exportas la clase como PDF ordenado.
✅ Cuando diga “Evaluación módulo X C#”, me propones una prueba de nivel real.
✅ Cuando diga “Versión visual”, activas la GUI con WPF o WinForms.
✅ No debes resumirme clases a menos que yo lo indique.

🧑‍🎓 Me llamo Gabo. Estoy en una formación de alto nivel. Este curso forma parte de mi proceso para convertirme en desarrollador profesional completo, incluyendo backend, escritorio y automatización.

📚 CURSO INTENSIVO DE C# – ESQUEMA COMPLETO DE MÓDULOS

🔵 MÓDULO 1 – Fundamentos de C# y sintaxis base
🎯 Objetivo: Aprender la estructura básica del lenguaje, tipos de datos, operadores, entrada/salida y flujos de control. Desarrollar una base sólida para escribir programas funcionales.
1. Clase C# 1 – Historia, ventajas y entorno de trabajo (Visual Studio / VSCode)
2. Clase C# 2 – Primer programa: estructura básica (Main, using, namespaces)
3. Clase C# 3 – Tipos de datos primitivos: int, float, double, char, bool, string
4. Clase C# 4 – Variables, constantes y buenas prácticas de nombres
5. Clase C# 5 – Operadores aritméticos, lógicos y relacionales
6. Clase C# 6 – Conversión de tipos (casting, parse, tryparse)
7. Clase C# 7 – Entrada y salida por consola (Console.ReadLine, Console.WriteLine)
8. Clase C# 8 – Comentarios, estructura y orden del código limpio
9. Clase C# 9 – Estructuras de decisión: if, else, else if
10. Clase C# 10 – Estructura switch: sintaxis y casos reales
11. Clase C# 11 – Bucles: while y do-while con ejemplos prácticos
12. Clase C# 12 – Bucle for clásico, anidado, con condiciones
13. Clase C# 13 – break, continue y return: control del flujo
14. Clase C# 14 – Proyecto mini: calculadora básica con menú y bucle
15. Clase C# 15 – Arreglos (arrays) unidimensionales: declaración, recorrido, límites
16. Clase C# 16 – Métodos: definición, invocación, retorno de valores
17. Clase C# 17 – Parámetros: por valor, por referencia (ref, out)
18. Clase C# 18 – Métodos con retorno condicional y validaciones
19. Clase C# 19 – Proyecto: gestor de notas con funciones y arreglos
20. Clase C# 20 – Manejo de errores básico con try-catch
21. Clase C# 21 – Enumeraciones (enum) y alias de tipo (using)
22. Clase C# 22 – Introducción a List<T> y var
23. Clase C# 23 – Proyecto final del módulo: Registro simple con validaciones
24. Clase C# 24 – Buenas prácticas de indentación, nombres y legibilidad
25. Clase C# 25 – 📘 Evaluación final del Módulo 1 (teoría + script real)

🔶 MÓDULO 2 – Programación Orientada a Objetos (POO) en C# (30 clases)
🎯 Objetivo: Dominar los pilares de la Programación Orientada a Objetos (POO) en C# moderna: clases, objetos, encapsulamiento, herencia, polimorfismo, interfaces y su aplicación práctica.
1. Clase C# 26 – ¿Qué es la Programación Orientada a Objetos? Principios clave
2. Clase C# 27 – Clases y objetos: estructura y creación en C#
3. Clase C# 28 – Atributos y métodos: definición y uso
4. Clase C# 29 – Encapsulamiento y modificadores de acceso (public, private, protected)
5. Clase C# 30 – Constructores y destructores en C#
6. Clase C# 31 – Sobrecarga de constructores y métodos
7. Clase C# 32 – Auto-properties y propiedades con lógica (get; set;)
8. Clase C# 33 – Clases parciales y clases estáticas
9. Clase C# 34 – Herencia simple: sintaxis y ejemplo práctico
10. Clase C# 35 – Herencia y métodos virtuales/override
11. Clase C# 36 – Polimorfismo en acción: métodos sobreescritos
12. Clase C# 37 – Clases abstractas y métodos abstractos
13. Clase C# 38 – Interfaces: concepto, implementación y comparación con clases abstractas
14. Clase C# 39 – Interfaces múltiples y conflictos de implementación
15. Clase C# 40 – Boxing, unboxing y tipos de conversión
16. Clase C# 41 – Introducción a object y uso de ToString(), Equals(), GetHashCode()
17. Clase C# 42 – Colecciones de objetos: listas de clases personalizadas
18. Clase C# 43 – Delegados (delegates): definición y uso básico
19. Clase C# 44 – Eventos (events) y suscriptores
20. Clase C# 45 – Proyecto: sistema de gestión de alumnos con herencia
21. Clase C# 46 – Indexadores y sobrecarga de operadores
22. Clase C# 47 – Clases genéricas y métodos genéricos (T)
23. Clase C# 48 – Uso de ref y out con objetos
24. Clase C# 49 – Namespace y organización profesional del código orientado a objetos
25. Clase C# 50 – Patrón Singleton en C#
26. Clase C# 51 – Patrón Factory y separación de responsabilidades
27. Clase C# 52 – Patrón Observer (eventos y subscripción)
28. Clase C# 53 – Proyecto visual: sistema de reservas con clases e interfaces
29. Clase C# 54 – Buenas prácticas de POO y errores comunes
30. Clase C# 55 – 📘 Evaluación final del módulo (teoría + ejercicio completo)

🟢 MÓDULO 3 – Estructuras de datos y colecciones en C# (30 clases)
🎯 Objetivo: Aprender a manipular, recorrer y aplicar estructuras de datos fundamentales y avanzadas usando las colecciones de C#, incluyendo listas, diccionarios, pilas, colas, sets y LINQ.
1. Clase C# 56 – Introducción a estructuras de datos y colecciones en C#
2. Clase C# 57 – Arreglos (int[], string[]) y sus limitaciones
3. Clase C# 58 – List<T>: declaración, métodos y recorrido
4. Clase C# 59 – Operaciones avanzadas con List<T>: búsqueda, ordenamiento, filtros
5. Clase C# 60 – Dictionary<TKey, TValue>: uso básico y casos reales
6. Clase C# 61 – Recorrer y manipular diccionarios
7. Clase C# 62 – HashSet<T> y SortedSet<T>: diferencias, eficiencia y ejemplos
8. Clase C# 63 – Queue<T>: funcionamiento FIFO y usos comunes
9. Clase C# 64 – Stack<T>: funcionamiento LIFO y usos comunes
10. Clase C# 65 – Comparación entre estructuras: ¿cuándo usar cuál?
11. Clase C# 66 – Proyecto mini: sistema de tickets con colas (Queue)
12. Clase C# 67 – Proyecto mini: historial de acciones con pila (Stack)
13. Clase C# 68 – Métodos auxiliares útiles (Contains, Find, IndexOf, etc.)
14. Clase C# 69 – Búsquedas con expresiones lambda
15. Clase C# 70 – Introducción a LINQ (Language Integrated Query)
16. Clase C# 71 – LINQ to Objects: Select, Where, OrderBy
17. Clase C# 72 – LINQ avanzado: GroupBy, Any, All, First, Last
18. Clase C# 73 – Proyecto práctico: inventario con filtros dinámicos en LINQ
19. Clase C# 74 – Conversión entre colecciones (ToList, ToArray, Cast, etc.)
20. Clase C# 75 – Eliminación de duplicados y limpieza de datos
21. Clase C# 76 – Uso combinado de diccionarios y listas anidadas
22. Clase C# 77 – Tuple, ValueTuple y KeyValuePair
23. Clase C# 78 – Proyecto práctico: base de datos en memoria con List<Dictionary<>>
24. Clase C# 79 – Serialización simple de colecciones a texto plano
25. Clase C# 80 – Proyecto: sistema de inscripción de estudiantes
26. Clase C# 81 – Mejores prácticas en estructuras de datos
27. Clase C# 82 – Manejo de excepciones al trabajar con colecciones
28. Clase C# 83 – Performance y complejidad de operaciones comunes
29. Clase C# 84 – Prueba técnica: manipulación avanzada de estructuras
30. Clase C# 85 – 📘 Evaluación final del Módulo 3 (teoría + desafío práctico)

🔵 MÓDULO 4 – Archivos, persistencia de datos y serialización en C# (30 clases)
🎯 Objetivo: Aprender a leer, escribir y manipular archivos de texto, binarios y estructuras serializadas. Dominar la persistencia de datos en programas reales.
1. Clase C# 86 – Introducción al manejo de archivos en C#
2. Clase C# 87 – Leer archivos de texto con File.ReadAllText, File.ReadAllLines
3. Clase C# 88 – Escribir archivos de texto con File.WriteAllText, AppendAllText
4. Clase C# 89 – Comprobar existencia de archivos y rutas (File.Exists, Directory.Exists)
5. Clase C# 90 – Crear, mover, copiar y eliminar archivos y carpetas
6. Clase C# 91 – Lectura línea por línea con StreamReader
7. Clase C# 92 – Escritura línea por línea con StreamWriter
8. Clase C# 93 – Proyecto: bitácora diaria guardada en archivos
9. Clase C# 94 – Leer y escribir archivos CSV
10. Clase C# 95 – Proyecto: lector de base de datos simple desde CSV
11. Clase C# 96 – Archivos binarios: introducción a FileStream
12. Clase C# 97 – Lectura binaria con BinaryReader
13. Clase C# 98 – Escritura binaria con BinaryWriter
14. Clase C# 99 – Proyecto: guardar un objeto serializado en binario
15. Clase C# 100 – Serialización básica con System.Text.Json
16. Clase C# 101 – Serialización de listas y diccionarios a JSON
17. Clase C# 102 – Deserialización de JSON a objetos
18. Clase C# 103 – Proyecto práctico: guardar agenda de contactos en JSON
19. Clase C# 104 – Introducción a Newtonsoft.Json (opcional)
20. Clase C# 105 – Manejo de rutas relativas y absolutas
21. Clase C# 106 – Directorios: creación, lectura, escritura y organización
22. Clase C# 107 – Archivos temporales, logs y backups automáticos
23. Clase C# 108 – Proyecto práctico: generador de informes diarios en carpetas ordenadas
24. Clase C# 109 – Acceso seguro a archivos: manejo de excepciones
25. Clase C# 110 – Buenas prácticas al trabajar con archivos grandes
26. Clase C# 111 – Proyecto: lector y filtro de grandes volúmenes desde CSV
27. Clase C# 112 – Validaciones y sanitización de entradas antes de guardar
28. Clase C# 113 – Persistencia de configuración en archivos .ini o .json
29. Clase C# 114 – Prueba técnica: construir un historial persistente de operaciones
30. Clase C# 115 – 📘 Evaluación final del módulo (archivos y persistencia)


🟣 MÓDULO 5 – Programación Visual con Windows Forms en C# (30 clases)
🎯 Objetivo: Aprender a crear interfaces gráficas (GUI) usando Windows Forms, conectar lógica con eventos, gestionar controles visuales y crear aplicaciones visuales funcionales.
1. Clase C# 116 – Introducción a Windows Forms y el diseño visual
2. Clase C# 117 – Crear el primer formulario con Form y controles básicos
3. Clase C# 118 – Propiedades del formulario: tamaño, título, color, inicio
4. Clase C# 119 – Uso del control Label, TextBox y Button
5. Clase C# 120 – Eventos: Click, TextChanged, KeyDown, etc.
6. Clase C# 121 – Proyecto mini: Calculadora visual básica
7. Clase C# 122 – Agrupar controles con GroupBox y Panel
8. Clase C# 123 – Control CheckBox y RadioButton
9. Clase C# 124 – Control ComboBox y ListBox
10. Clase C# 125 – Proyecto mini: selector de opciones con ComboBox y RadioButton
11. Clase C# 126 – Control DataGridView: mostrar tablas y listas
12. Clase C# 127 – Conectar listas de objetos a DataGridView
13. Clase C# 128 – Proyecto: tabla dinámica de productos
14. Clase C# 129 – Mensajes emergentes con MessageBox
15. Clase C# 130 – Navegación entre formularios: Form.Show() y Form.Hide()
16. Clase C# 131 – Control de flujo entre formularios (Login -> Principal)
17. Clase C# 132 – Menús y submenús con MenuStrip
18. Clase C# 133 – Barras de herramientas con ToolStrip
19. Clase C# 134 – Cuadros de diálogo: abrir/guardar archivos (OpenFileDialog)
20. Clase C# 135 – Personalización visual: fuentes, colores, íconos
21. Clase C# 136 – Proyecto: sistema visual de gestión de tareas
22. Clase C# 137 – Validación de entradas desde formularios
23. Clase C# 138 – Conectar formularios con archivos y guardar datos
24. Clase C# 139 – Integrar lógica con colecciones y estructuras
25. Clase C# 140 – Diseño limpio, orden visual y experiencia de usuario
26. Clase C# 141 – Buenas prácticas en programación visual
27. Clase C# 142 – Separación entre lógica y presentación (MVC básico)
28. Clase C# 143 – Prueba técnica: crear una app visual con login y base
29. Clase C# 144 – Optimización y gestión de errores visuales
30. Clase C# 145 – 📘 Evaluación final del módulo (GUI + funcionalidad)

🟢 MÓDULO 6 – Conexión a bases de datos con SQL y C# (ADO.NET) (30 clases)
🎯 Objetivo: Aprender a conectar C# con bases de datos SQL, realizar operaciones CRUD y crear aplicaciones conectadas a datos reales usando ADO.NET.
1. Clase C# 146 – ¿Qué es ADO.NET? Introducción y arquitectura
2. Clase C# 147 – Crear una base de datos local en SQL Server / SQLite
3. Clase C# 148 – Conceptos clave: tablas, filas, columnas, claves primarias
4. Clase C# 149 – Primer SELECT desde C# (conexión y lectura básica)
5. Clase C# 150 – INSERT, UPDATE y DELETE desde C#
6. Clase C# 151 – El objeto SqlConnection y su configuración
7. Clase C# 152 – Uso de SqlCommand para ejecutar consultas
8. Clase C# 153 – Leer datos con SqlDataReader
9. Clase C# 154 – Insertar datos desde formularios con parámetros
10. Clase C# 155 – Evitar SQL Injection con parámetros seguros
11. Clase C# 156 – Crear una mini agenda con formularios y base de datos
12. Clase C# 157 – Conexión con SQLite y diferencias frente a SQL Server
13. Clase C# 158 – Proyecto: agenda con SQLite portátil (sin servidor)
14. Clase C# 159 – El objeto DataTable: carga de datos estructurada
15. Clase C# 160 – SqlDataAdapter y DataSet para lectura/escritura en bloque
16. Clase C# 161 – Mostrar datos en DataGridView desde SQL
17. Clase C# 162 – Editar datos directamente desde el grid
18. Clase C# 163 – Filtros y búsquedas en tiempo real con SQL
19. Clase C# 164 – Formularios relacionados con múltiples tablas
20. Clase C# 165 – Proyecto: sistema visual de inventario con SQL
21. Clase C# 166 – Manejo de errores en conexiones SQL
22. Clase C# 167 – Buenas prácticas en consultas y acceso a datos
23. Clase C# 168 – CRUD completo con validaciones y conexión segura
24. Clase C# 169 – Respaldos automáticos y exportación a CSV
25. Clase C# 170 – Proyecto: sistema de usuarios con login y permisos
26. Clase C# 171 – Diseño de base de datos relacional: claves foráneas
27. Clase C# 172 – Relaciones uno-a-muchos y muchos-a-muchos
28. Clase C# 173 – Optimización y rendimiento de consultas
29. Clase C# 174 – Prueba técnica: conectar base de datos, guardar, mostrar y filtrar
30. Clase C# 175 – 📘 Evaluación final del módulo (SQL + C#)


🛡️ MÓDULO 7 – Seguridad en aplicaciones C#: Login, hashing, cifrado y buenas prácticas (25 clases)
🎯 Objetivo: Aprender a proteger los datos y usuarios en aplicaciones C#, implementando mecanismos de autenticación, hashing de contraseñas, cifrado y validaciones seguras.
1. Clase C# 176 – Introducción a la seguridad en aplicaciones de escritorio
2. Clase C# 177 – Principios de autenticación y autorización
3. Clase C# 178 – Diseño de formularios de login y registro
4. Clase C# 179 – Almacenamiento seguro de contraseñas
5. Clase C# 180 – Introducción a hashing: qué es y por qué se usa
6. Clase C# 181 – Implementar hashing SHA-256 en C#
7. Clase C# 182 – Comparar contraseñas con hash guardado
8. Clase C# 183 – Validaciones de entradas: evitar inyecciones y errores
9. Clase C# 184 – Crear clases helper de seguridad reutilizable
10. Clase C# 185 – Proyecto: sistema de login con hash y SQLite
11. Clase C# 186 – Cifrado simétrico con AES en C#
12. Clase C# 187 – Cifrado y descifrado de texto o archivos
13. Clase C# 188 – Guardar datos cifrados en base de datos
14. Clase C# 189 – Gestión de llaves secretas de forma segura
15. Clase C# 190 – Proyecto: app de notas cifradas con contraseña
16. Clase C# 191 – Generación de tokens o códigos únicos
17. Clase C# 192 – Restringir accesos según roles (admin, usuario, etc.)
18. Clase C# 193 – Registro de actividad del usuario (logs internos)
19. Clase C# 194 – Temporizador de sesión (auto logout)
20. Clase C# 195 – Interfaz visual: mostrar u ocultar campos según rol
21. Clase C# 196 – Buenas prácticas de seguridad y errores comunes
22. Clase C# 197 – Control de errores y manejo de excepciones críticas
23. Clase C# 198 – Proyecto: app con roles, login, logout y seguridad de datos
24. Clase C# 199 – Integración completa de hashing, login y cifrado
25. Clase C# 200 – 📘 Evaluación final del módulo

🏗️ MÓDULO 8 – Arquitectura limpia en C#: Proyecto Mini CRM completo (30 clases)
🎯 Objetivo: Aplicar todo lo aprendido en un proyecto real siguiendo una arquitectura ordenada, escalable y profesional, con separación de capas (GUI, lógica, datos) y buenas prácticas.
1. Clase C# 201 – ¿Qué es una arquitectura limpia? Principios básicos
2. Clase C# 202 – Capas de una aplicación profesional: presentación, lógica, datos
3. Clase C# 203 – Planificación del proyecto Mini CRM
4. Clase C# 204 – Crear estructura de carpetas y namespaces correctamente
5. Clase C# 205 – Diseño de interfaz visual base (paneles, menús, navegación)
6. Clase C# 206 – Crear modelo de clientes: clase Cliente, validaciones
7. Clase C# 207 – Crear modelo de ventas: clase Venta, relaciones con cliente
8. Clase C# 208 – Base de datos inicial: tablas, claves foráneas, diseño relacional
9. Clase C# 209 – Crear capa de acceso a datos (DAO)
10. Clase C# 210 – Métodos de acceso: insertar, consultar, actualizar, eliminar (CRUD)
11. Clase C# 211 – Conectar la lógica a la capa visual (formularios)
12. Clase C# 212 – Mostrar datos en DataGridView desde múltiples tablas
13. Clase C# 213 – Crear formulario de registro de clientes
14. Clase C# 214 – Crear formulario de registro de ventas
15. Clase C# 215 – Validaciones visuales y automáticas
16. Clase C# 216 – Implementar búsquedas y filtros avanzados
17. Clase C# 217 – Mostrar totales, resúmenes y reportes
18. Clase C# 218 – Roles de usuario: administración y acceso limitado
19. Clase C# 219 – Login y control de acceso por rol
20. Clase C# 220 – Capa de seguridad: contraseñas, cifrado, restricciones
21. Clase C# 221 – Exportación de datos a PDF, Excel y CSV
22. Clase C# 222 – Diseño visual avanzado y profesionalización
23. Clase C# 223 – Pruebas del sistema: flujos completos
24. Clase C# 224 – Backup de base de datos y recuperación
25. Clase C# 225 – Optimización del rendimiento de formularios y queries
26. Clase C# 226 – Implementar logs de actividad y auditoría
27. Clase C# 227 – Estructura modular para escalar el sistema
28. Clase C# 228 – Instalación del sistema en otra PC
29. Clase C# 229 – Prueba técnica: implementar módulo de historial de compras
30. Clase C# 230 – 📘 Evaluación final del módulo (Mini CRM completo)


🎨 MÓDULO 9 – Aplicaciones visuales modernas con WPF (Windows Presentation Foundation) (25 clases)
🎯 Objetivo: Aprender a crear interfaces gráficas modernas y fluidas con WPF y XAML, utilizando el patrón MVVM, estilos visuales y animaciones.
1. Clase C# 231 – Introducción a WPF y comparación con WinForms
2. Clase C# 232 – Estructura de una app WPF: App.xaml, MainWindow.xaml
3. Clase C# 233 – Uso básico de XAML: etiquetas, atributos y jerarquía
4. Clase C# 234 – Controles visuales básicos (Button, TextBox, Label, etc.)
5. Clase C# 235 – Diseño visual: StackPanel, Grid, DockPanel, WrapPanel
6. Clase C# 236 – Estilos visuales y recursos compartidos (Resources)
7. Clase C# 237 – Plantillas personalizadas (ControlTemplate, DataTemplate)
8. Clase C# 238 – Animaciones básicas con Storyboard
9. Clase C# 239 – Eventos y comandos en WPF
10. Clase C# 240 – Introducción al patrón MVVM
11. Clase C# 241 – Binding entre vista y ViewModel (OneWay, TwoWay)
12. Clase C# 242 – Uso de INotifyPropertyChanged correctamente
13. Clase C# 243 – Creación del ViewModel y comunicación con la vista
14. Clase C# 244 – Comandos personalizados con ICommand
15. Clase C# 245 – Separación completa por capas con MVVM
16. Clase C# 246 – Manejo de múltiples ventanas (NavigationWindow, dialogs)
17. Clase C# 247 – Interfaz adaptable: autoescalado y responsive
18. Clase C# 248 – Integración de íconos, fuentes y temas
19. Clase C# 249 – Personalización con estilos modernos tipo Fluent UI / Material Design
20. Clase C# 250 – Conexión con base de datos desde ViewModel (con patrón Repository)
21. Clase C# 251 – Proyecto: Panel de control administrativo con MVVM
22. Clase C# 252 – Integración de gráficos (charts) en WPF
23. Clase C# 253 – Implementación de un sistema de navegación modular
24. Clase C# 254 – Empaquetado e instalación de apps WPF
25. Clase C# 255 – 📘 Evaluación final del módulo

☁️ MÓDULO 10 – Aplicaciones conectadas a la nube con APIs y servicios REST (25 clases)
🎯 Objetivo: Aprender a integrar aplicaciones C# con servicios externos y APIs REST, enviar y consumir datos remotos, y desarrollar apps modernas conectadas a internet.
1. Clase C# 256 – ¿Qué es una API? REST, endpoints, JSON y métodos HTTP
2. Clase C# 257 – Introducción a HttpClient en C#
3. Clase C# 258 – Realizar una petición GET a una API pública
4. Clase C# 259 – Interpretar respuestas JSON en C#
5. Clase C# 260 – Deserialización con System.Text.Json y Newtonsoft.Json
6. Clase C# 261 – Peticiones POST, PUT y DELETE
7. Clase C# 262 – Manejo de códigos de respuesta HTTP (200, 404, 500…)
8. Clase C# 263 – Headers, tokens y autenticación básica
9. Clase C# 264 – Conexión a API que requiere token (Bearer, JWT)
10. Clase C# 265 – Envío de datos con objetos serializados
11. Clase C# 266 – Consumo de APIs en apps de consola
12. Clase C# 267 – Consumo de APIs en apps WinForms
13. Clase C# 268 – Consumo de APIs en apps WPF (MVVM incluido)
14. Clase C# 269 – Implementar spinner o carga mientras se conecta
15. Clase C# 270 – Manejo de errores y fallos de red con try-catch
16. Clase C# 271 – Proyecto: consultar clima desde una API pública
17. Clase C# 272 – Proyecto: conversor de divisas conectado a una API externa
18. Clase C# 273 – Integrar APIs de terceros como Google, OpenAI, etc.
19. Clase C# 274 – Introducción a OAuth2 para C#
20. Clase C# 275 – Trabajar con Webhooks (escuchar notificaciones)
21. Clase C# 276 – Crear tu propia API REST básica en C#
22. Clase C# 277 – Estructura de un microservicio en C#
23. Clase C# 278 – Seguridad en la conexión: HTTPS, certificados y headers
24. Clase C# 279 – Proyecto final: App de gestión de tareas con conexión remota
25. Clase C# 280 – 📘 Evaluación final del módulo


🧪 MÓDULO 11 – Testing, cobertura y control de calidad en C# (25 clases)
🎯 Objetivo: Aprender a crear pruebas automatizadas, asegurar la calidad del código, detectar errores y mejorar la confiabilidad de aplicaciones reales en C#.
1. Clase C# 281 – ¿Qué es testing? Tipos de pruebas: unitarias, de integración, de sistema
2. Clase C# 282 – Instalación y uso de xUnit en proyectos de C#
3. Clase C# 283 – Estructura básica de una prueba unitaria con xUnit
4. Clase C# 284 – Asserts comunes: Assert.Equal, Assert.True, Assert.Throws, etc.
5. Clase C# 285 – Separar la lógica de negocio para permitir pruebas limpias
6. Clase C# 286 – Pruebas de funciones puras vs pruebas con dependencias
7. Clase C# 287 – Uso de Moq para simular dependencias (mocks)
8. Clase C# 288 – Pruebas de métodos que llaman a bases de datos o APIs
9. Clase C# 289 – Organización de pruebas por módulos
10. Clase C# 290 – Nombres claros para pruebas y estructura AAA (Arrange, Act, Assert)
11. Clase C# 291 – Ejecutar pruebas automáticamente (Test Explorer en Visual Studio)
12. Clase C# 292 – Tests en consola y scripts automatizados
13. Clase C# 293 – Introducción a la cobertura de código (Code Coverage)
14. Clase C# 294 – Detectar código no cubierto y refactorizar
15. Clase C# 295 – Testing en proyectos WinForms y WPF (lógica desacoplada)
16. Clase C# 296 – Proyecto: probar una clase de lógica de negocio con xUnit
17. Clase C# 297 – Integrar tests en apps conectadas a APIs
18. Clase C# 298 – Pruebas de integración entre componentes
19. Clase C# 299 – Pruebas con datos reales simulados (fake data)
20. Clase C# 300 – Introducción a pruebas E2E (End to End)
21. Clase C# 301 – Integración continua (CI) con GitHub Actions para correr tests automáticamente
22. Clase C# 302 – Buenas prácticas en testing profesional
23. Clase C# 303 – Código limpio orientado a pruebas (Testable code)
24. Clase C# 304 – Preparación de entrevistas técnicas con pruebas en vivo
25. Clase C# 305 – 📘 Evaluación final del módulo


🏗️ MÓDULO 12 – Buenas prácticas profesionales, arquitectura limpia y patrones de diseño (25 clases)
🎯 Objetivo: Aprender a construir software escalable, legible y mantenible aplicando principios sólidos de arquitectura, organización modular y patrones de diseño reales.
1. Clase C# 306 – ¿Qué es una buena arquitectura? Separación de responsabilidades
2. Clase C# 307 – Principios SOLID: introducción general
3. Clase C# 308 – Principio de responsabilidad única (SRP)
4. Clase C# 309 – Principio abierto/cerrado (OCP)
5. Clase C# 310 – Principio de sustitución de Liskov (LSP)
6. Clase C# 311 – Principio de segregación de interfaces (ISP)
7. Clase C# 312 – Principio de inversión de dependencias (DIP)
8. Clase C# 313 – Arquitectura en capas (Presentación, Dominio, Datos)
9. Clase C# 314 – Clean Architecture: conceptos fundamentales
10. Clase C# 315 – Separación de lógica de negocio, UI y persistencia
11. Clase C# 316 – Introducción a los patrones de diseño (creacionales, estructurales, comportamentales)
12. Clase C# 317 – Patrón Singleton vs Static
13. Clase C# 318 – Patrón Factory y Abstract Factory
14. Clase C# 319 – Patrón Strategy
15. Clase C# 320 – Patrón Repository
16. Clase C# 321 – Patrón Adapter, Decorator y Composite
17. Clase C# 322 – Patrón Observer y Event Aggregator
18. Clase C# 323 – Patrón Command y State
19. Clase C# 324 – Antipatterns comunes y cómo evitarlos
20. Clase C# 325 – Modularización del proyecto: carpetas, namespaces y convenciones
21. Clase C# 326 – Proyecto práctico: app organizadora con arquitectura limpia
22. Clase C# 327 – Cómo documentar código profesionalmente
23. Clase C# 328 – Convenciones de nombres y legibilidad de código
24. Clase C# 329 – Code Review y mentoría entre desarrolladores
25. Clase C# 330 – 📘 Evaluación final del módulo


🏁 MÓDULO 13 – Proyecto final profesional en C# (25 clases)
🎯 Objetivo: Desarrollar una aplicación profesional de principio a fin, aplicando todo lo aprendido en los módulos anteriores: lógica, arquitectura, patrones, testing, bases de datos, diseño visual, y publicación.
1. Clase C# 331 – Presentación del proyecto final: requisitos y análisis
2. Clase C# 332 – Diseño inicial: estructura general y módulos de la app
3. Clase C# 333 – Elección del tipo de aplicación: consola, WinForms, WPF o web
4. Clase C# 334 – Diagrama de flujo y modelos de datos
5. Clase C# 335 – Diseño de clases y organización de carpetas
6. Clase C# 336 – Creación de base de datos: tablas y relaciones
7. Clase C# 337 – Conexión a base de datos desde C#
8. Clase C# 338 – Desarrollo del módulo de autenticación
9. Clase C# 339 – Interfaz visual: diseño del panel principal
10. Clase C# 340 – Programación de eventos y navegación entre ventanas
11. Clase C# 341 – Registro, edición y eliminación de datos con interfaz
12. Clase C# 342 – Aplicación de validaciones y control de errores
13. Clase C# 343 – Implementación de patrones de diseño claves en el proyecto
14. Clase C# 344 – Separación de capas: presentación, lógica y datos
15. Clase C# 345 – Implementación de pruebas con xUnit en componentes clave
16. Clase C# 346 – Integración de logs de errores (logging)
17. Clase C# 347 – Estilización y diseño visual profesional (WinForms/WPF)
18. Clase C# 348 – Generación de reportes (PDF, Excel o en pantalla)
19. Clase C# 349 – Gestión de sesiones de usuario y permisos
20. Clase C# 350 – Optimización del rendimiento y revisión final del código
21. Clase C# 351 – Empaquetado y compilación de la aplicación
22. Clase C# 352 – Distribución: instalador, ejecutable o web deploy
23. Clase C# 353 – Documentación del sistema
24. Clase C# 354 – Preparación del portafolio: presentación de la app
25. Clase C# 355 – 📘 Evaluación final del curso completo

📦 MÓDULO 14 – Integración con APIs, servicios externos y herramientas modernas (25 clases)
🎯 Objetivo: Aprender a consumir y crear APIs, interactuar con servicios externos, trabajar con herramientas modernas de desarrollo, y preparar tus apps para un entorno conectado y real.
1. Clase C# 356 – ¿Qué es una API? Diferencias entre REST, SOAP, GraphQL
2. Clase C# 357 – Consumir una API REST con HttpClient (GET, POST, PUT, DELETE)
3. Clase C# 358 – Parseo de JSON usando Newtonsoft.Json
4. Clase C# 359 – Llamadas asincrónicas a APIs (async, await)
5. Clase C# 360 – Control de errores al consumir APIs
6. Clase C# 361 – Crear una API básica en C# con ASP.NET Web API
7. Clase C# 362 – Rutas, controladores y acciones en Web API
8. Clase C# 363 – Respuestas JSON y status codes personalizados
9. Clase C# 364 – CRUD completo con base de datos y Web API
10. Clase C# 365 – Seguridad básica: API key y CORS
11. Clase C# 366 – Autenticación con JWT (JSON Web Token)
12. Clase C# 367 – Subida y descarga de archivos por API
13. Clase C# 368 – Enviar correos desde C# con SMTP
14. Clase C# 369 – Conectar tu app a Google APIs (hojas de cálculo, Gmail)
15. Clase C# 370 – Conexión con APIs de pago (Stripe, PayPal)
16. Clase C# 371 – Lectura y escritura de archivos Excel con EPPlus
17. Clase C# 372 – Generación de PDFs automáticos con iTextSharp
18. Clase C# 373 – Conexión con bases de datos externas (SQL Server remoto, MySQL)
19. Clase C# 374 – Uso de herramientas como Postman e Insomnia
20. Clase C# 375 – Publicar tu Web API en la nube (Azure, Railway, Render)
21. Clase C# 376 – Crear tu propio cliente API en C#
22. Clase C# 377 – Versionamiento de APIs y documentación con Swagger
23. Clase C# 378 – Buenas prácticas de integración de servicios
24. Clase C# 379 – Desafío: consumir múltiples APIs en un proyecto real
25. Clase C# 380 – 📘 Evaluación final del módulo

🧪 MÓDULO 15 – Testing avanzado, depuración y control de calidad de software (25 clases)

🎯 Objetivo: Dominar técnicas modernas de pruebas automatizadas, detección de errores, análisis de calidad y entrega de código robusto, limpio y profesional.
1. Clase C# 381 – Introducción al testing: ¿por qué y cuándo testear?
2. Clase C# 382 – Tipos de pruebas: unitarias, integración, end-to-end
3. Clase C# 383 – Frameworks de testing en C#: xUnit, NUnit, MSTest
4. Clase C# 384 – Escribir tu primera prueba unitaria con xUnit
5. Clase C# 385 – Aserciones comunes (Assert.Equal, Assert.True, etc.)
6. Clase C# 386 – Pruebas de funciones con múltiples entradas
7. Clase C# 387 – Mocking: ¿qué es y cómo usarlo? (Moq)
8. Clase C# 388 – Testear métodos que usan bases de datos o archivos
9. Clase C# 389 – Cobertura de pruebas: ¿cuánto es suficiente?
10. Clase C# 390 – Introducción a pruebas de integración
11. Clase C# 391 – Simulación de servicios y pruebas con dependencias
12. Clase C# 392 – Tests en aplicaciones de consola o escritorio
13. Clase C# 393 – Pruebas automatizadas de API con Postman
14. Clase C# 394 – Debugging con Visual Studio: breakpoints y watch
15. Clase C# 395 – Análisis de errores comunes y cómo solucionarlos
16. Clase C# 396 – Logs y trazabilidad: cómo dejar rastros útiles
17. Clase C# 397 – Refactorización segura con pruebas existentes
18. Clase C# 398 – Code smells: cómo detectarlos y eliminarlos
19. Clase C# 399 – Análisis estático de código con herramientas como SonarLint
20. Clase C# 400 – Validación de calidad continua (CI/CD básico)
21. Clase C# 401 – Revisión de código (Code Review): cómo y por qué
22. Clase C# 402 – Estándares de formato, convenciones y análisis con linters
23. Clase C# 403 – Proyecto práctico: testear una app real paso a paso
24. Clase C# 404 – Buenas prácticas de testing y mantenimiento
25. Clase C# 405 – 📘 Evaluación final del módulo

🌐 MÓDULO 16 – Git, GitHub y flujo de trabajo profesional con control de versiones (25 clases)
🎯 Objetivo: Dominar Git y GitHub para gestionar versiones de tus proyectos, colaborar profesionalmente y trabajar como lo hacen los equipos de desarrollo reales.
1. Clase C# 406 – ¿Qué es Git y por qué es esencial en desarrollo moderno?
2. Clase C# 407 – Instalar Git y configurarlo en tu sistema
3. Clase C# 408 – Crear tu primer repositorio local
4. Clase C# 409 – Estados de archivos: working directory, staging y commit
5. Clase C# 410 – Comandos esenciales: git add, git commit, git status
6. Clase C# 411 – Historial de cambios: git log, git diff
7. Clase C# 412 – Crear y trabajar con ramas (git branch, git checkout)
8. Clase C# 413 – Fusionar ramas (git merge) y resolver conflictos
9. Clase C# 414 – Repositorios remotos: conectar con GitHub (git remote)
10. Clase C# 415 – Subir tus cambios a GitHub (git push, git pull)
11. Clase C# 416 – Crear repositorios directamente desde GitHub
12. Clase C# 417 – Clonar proyectos existentes y contribuir (git clone)
13. Clase C# 418 – Uso de .gitignore y control de archivos sensibles
14. Clase C# 419 – Buenas prácticas en mensajes de commit
15. Clase C# 420 – Flujo de trabajo en equipo con Git (feature branches, pull requests)
16. Clase C# 421 – Revisiones de código con GitHub Pull Requests
17. Clase C# 422 – Gestión de issues y tareas en GitHub Projects
18. Clase C# 423 – Uso de etiquetas y versiones (git tag)
19. Clase C# 424 – Resolución de errores comunes con git reset, git revert
20. Clase C# 425 – Introducción a GitHub Actions para automatizar procesos
21. Clase C# 426 – Crear un portafolio profesional con tus repos públicos
22. Clase C# 427 – Cómo hacer forks y contribuir a proyectos open source
23. Clase C# 428 – Seguridad en GitHub: claves, secretos, privacidad
24. Clase C# 429 – Proyecto práctico: flujo completo desde cero hasta GitHub
25. Clase C# 430 – 📘 Evaluación final del módulo
🤖 MÓDULO 17 – Automatización, scripts y tareas repetitivas con C# (25 clases)
🎯 Objetivo: Aprender a automatizar procesos cotidianos con C#, desde manipulación de archivos hasta tareas del sistema, scraping y control de flujo, aumentando tu productividad como programador.
1. Clase C# 431 – ¿Qué es la automatización? Casos de uso reales
2. Clase C# 432 – Crear scripts básicos de consola en C#
3. Clase C# 433 – Leer, crear y modificar archivos de texto (txt, csv, json)
4. Clase C# 434 – Automatizar renombrado y organización de archivos
5. Clase C# 435 – Programar tareas por hora y fecha (Timer, Task, async)
6. Clase C# 436 – Automatizar envío de correos electrónicos con SMTP
7. Clase C# 437 – Leer correos entrantes con IMAP y analizar contenido
8. Clase C# 438 – Scraping básico: obtener datos de sitios web con HtmlAgilityPack
9. Clase C# 439 – Automatizar limpieza y análisis de datos (DataTable, LINQ)
10. Clase C# 440 – Crear scripts para descargar archivos automáticamente
11. Clase C# 441 – Automatizar tareas del sistema operativo (archivos, procesos, etc.)
12. Clase C# 442 – Ejecutar comandos de consola desde C#
13. Clase C# 443 – Crear logs automáticos de procesos
14. Clase C# 444 – Agendar tareas con el Programador de Tareas de Windows desde C#
15. Clase C# 445 – Generación automática de reportes en Excel o PDF
16. Clase C# 446 – Automatizar interacción con bases de datos (inserción, backup, limpieza)
17. Clase C# 447 – Control de versiones automatizado con Git desde C#
18. Clase C# 448 – Crear asistentes personales básicos por línea de comandos
19. Clase C# 449 – Interactuar con APIs externas automáticamente
20. Clase C# 450 – Automatizar carga de información a Google Sheets (API)
21. Clase C# 451 – Uso de Selenium para automatizar tareas en navegadores
22. Clase C# 452 – Casos prácticos: automatización para freelancers y negocios
23. Clase C# 453 – Crear scripts reutilizables y configurables (parámetros por línea de comandos)
24. Clase C# 454 – Proyecto práctico: sistema de automatización de informes y respaldos
25. Clase C# 455 – 📘 Evaluación final del módulo

🏁 MÓDULO 18 – Proyecto Final Integrador + Evaluación global (25 clases)
🎯 Objetivo: Integrar todo lo aprendido en un proyecto profesional completo, resolviendo problemas reales, con documentación, control de versiones, testing y despliegue.
1. Clase C# 456 – Presentación del proyecto final: requisitos y objetivo
2. Clase C# 457 – Planificación del proyecto: fases, cronograma, alcances
3. Clase C# 458 – Elección del dominio: negocio, educación, salud, servicios
4. Clase C# 459 – Diseño del sistema: diagrama de clases y flujo
5. Clase C# 460 – Estructuración de carpetas, repositorio y entorno
6. Clase C# 461 – Creación del modelo de datos y base de datos inicial
7. Clase C# 462 – Desarrollo del backend con C#: lógica principal
8. Clase C# 463 – Interacción con archivos y/o base de datos
9. Clase C# 464 – Módulo de autenticación o seguridad básica
10. Clase C# 465 – Creación de una interfaz básica (consola, WinForms o WPF)
11. Clase C# 466 – Conexión entre lógica, datos y presentación
12. Clase C# 467 – Aplicación de patrones de diseño vistos en el curso
13. Clase C# 468 – Implementación de automatizaciones internas
14. Clase C# 469 – Pruebas unitarias y pruebas de integración
15. Clase C# 470 – Control de versiones con Git y ramas bien gestionadas
16. Clase C# 471 – Documentación del código y del sistema
17. Clase C# 472 – Creación del README profesional en GitHub
18. Clase C# 473 – Gestión de tareas y progreso con GitHub Projects
19. Clase C# 474 – Revisión del código, optimización y refactorización
20. Clase C# 475 – Preparación para entregar a cliente o usar en entrevista
21. Clase C# 476 – Simulación de entrevista técnica explicando tu proyecto
22. Clase C# 477 – Presentación de resultados: rendimiento, buenas prácticas
23. Clase C# 478 – Revisión de posibles mejoras y ampliaciones futuras
24. Clase C# 479 – Subida del proyecto completo a GitHub
25. Clase C# 480 – 📘 Evaluación final global del curso

Este módulo no es solo mi evaluación: es mi graduación como programador profesional en C#.
